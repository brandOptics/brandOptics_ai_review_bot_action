name: "brandOptics AI Neural Nexus Code Review"
description: "Runs the brandOptics AI neural-intelligence engine against your PR."
branding:
  icon: "zap"
  color: "green"

inputs:
  openai_key:
    description: "Your OpenAI API key"
    required: true
  github_token:
    description: "GitHub Actions token (pass via workflow)"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - id: detect
      name: Find project root and detect languages
      run: |
        pkg=$(find . -type f -name package.json | head -n1)
        if [ -n "$pkg" ]; then
          root=$(dirname "$pkg")
        else
          root="."
        fi
        echo "PROJECT_ROOT=$root" >> $GITHUB_ENV

        HAS_REACT=false
        HAS_ANGULAR=false
        HAS_PY=false
        HAS_DOTNET=false
        HAS_FLUTTER=false

        if [ -f "$root/package.json" ]; then
          if grep -q '"react"[[:space:]]*:' "$root/package.json"; then
            HAS_REACT=true
          fi
          if grep -q '"@angular/core"' "$root/package.json"; then
            HAS_ANGULAR=true
          fi
        fi

        if find "$root" -type f -name '*.py' | grep -q .; then
          HAS_PY=true
        fi

        if find "$root" -type f -name '*.sln' | grep -q .; then
          HAS_DOTNET=true
        fi

        if find "$root" -type f -name 'pubspec.yaml' | grep -q .; then
          HAS_FLUTTER=true
        fi

        echo "HAS_REACT=$HAS_REACT"       >> $GITHUB_ENV
        echo "HAS_ANGULAR=$HAS_ANGULAR"   >> $GITHUB_ENV
        echo "HAS_PY=$HAS_PY"             >> $GITHUB_ENV
        echo "HAS_DOTNET=$HAS_DOTNET"     >> $GITHUB_ENV
        echo "HAS_FLUTTER=$HAS_FLUTTER"   >> $GITHUB_ENV
      shell: bash
    - name: Prepare reports directory
      run: mkdir -p .github/linter-reports
      shell: bash
    - name: Lint React
      shell: bash
      run: |
        if [ "$HAS_REACT" = "true" ]; then
          echo "Setting up Node for React"
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          apt-get install -y nodejs
          cd "$PROJECT_ROOT"
          npm install --no-save \
            eslint @eslint/js \
            @babel/core @babel/eslint-parser @babel/preset-react \
            eslint-plugin-react eslint-plugin-react-hooks \
            eslint-plugin-react-refresh eslint-plugin-jsx-a11y \
            eslint-plugin-import eslint-plugin-sonarjs
          npx eslint . \
            --config eslint.config.js \
            --max-warnings=1000 \
            --format json \
            --output-file "$GITHUB_WORKSPACE/.github/linter-reports/eslint.json" || \
            echo "ðŸŸ  ESLint finished with warnings"
        else
          echo "Skipping React linting."
        fi

    - name: Lint Angular
      shell: bash
      run: |
        if [ "$HAS_ANGULAR" = "true" ]; then
          echo "Setting up Node for Angular"
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          apt-get install -y nodejs
          cd "$PROJECT_ROOT"
          npm install --no-save \
            eslint @eslint/js \
            @angular-eslint/eslint-plugin @angular-eslint/eslint-config \
            eslint-plugin-import
          npx eslint 'src/**/*.{ts,tsx}' \
            --format json \
            --output-file "$GITHUB_WORKSPACE/.github/linter-reports/eslint.json" || true
        else
          echo "Skipping Angular linting."
        fi

    - name: Lint Python
      shell: bash
      run: |
        if [ "$HAS_PY" = "true" ]; then
          python -m pip install --upgrade pip
          pip install flake8 flake8-json
          cd "$PROJECT_ROOT"
          FILES=$(find . -type f -name "*.py")
          if [ -n "$FILES" ]; then
            flake8 . --format=json --output-file "$GITHUB_WORKSPACE/.github/linter-reports/flake8.json" || true
          fi
        else
          echo "Skipping Python linting."
        fi

    - name: Lint .NET
      shell: bash
      run: |
        if [ "$HAS_DOTNET" = "true" ]; then
          dotnet tool install -g dotnet-format
          export PATH="$PATH:$HOME/.dotnet/tools"
          cd "$PROJECT_ROOT"
          dotnet format --verify-no-changes --report "$GITHUB_WORKSPACE/.github/linter-reports/dotnet-format.json" || true
        else
          echo "Skipping .NET formatting."
        fi

    - name: Analyze Flutter
      shell: bash
      run: |
        if [ "$HAS_FLUTTER" = "true" ]; then
          git clone https://github.com/flutter/flutter.git -b stable --depth 1
          export PATH="$PWD/flutter/bin:$PATH"
          flutter doctor
          cd "$PROJECT_ROOT"
          flutter pub get
          dart analyze --format=json > "$GITHUB_WORKSPACE/.github/linter-reports/dartanalyzer.json" || true
        else
          echo "Skipping Flutter analysis."
        fi

    - name: Install Python deps for AI bot
      run: |
        python -m pip install --upgrade pip
        pip install openai PyGithub pytz
      shell: bash
    - name: Run the AI review
      shell: bash
      run: python "$GITHUB_ACTION_PATH/.github/scripts/jibinbot_review.py"
      env:
        OPENAI_API_KEY:   ${{ inputs.openai_key }}
        GITHUB_TOKEN:     ${{ inputs.github_token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_EVENT_PATH: ${{ github.event_path }}
        TARGET_TIMEZONE: Asia/Kolkata
