name: "brandOptics AI Neural Nexus Code Review"
description: "Runs the brandOptics AI neural-intelligence engine against your PR."
branding:
  icon: "zap"
  color: "green"

inputs:
  openai_key:
    description: "Your OpenAI API key"
    required: true
  github_token:
    description: "GitHub Actions token (pass via workflow)"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - id: detect
      name: Find project root and detect languages
      shell: bash
      run: |
        set -euo pipefail
        pkg=$(find . -type f -name package.json -not -path "*/node_modules/*" | head -n1 || true)
        if [ -n "${pkg:-}" ]; then root=$(dirname "$pkg"); else root="."; fi
        echo "PROJECT_ROOT=$root" >> "$GITHUB_ENV"

        HAS_NODE=false; HAS_REACT=false; HAS_ANGULAR=false; HAS_PY=false; HAS_DOTNET=false; HAS_FLUTTER=false

        if find . -type f \( -name "package.json" -o -name "package-lock.json" -o -name "yarn.lock" -o -name "pnpm-lock.yaml" \) -not -path "*/node_modules/*" | grep -q .; then HAS_NODE=true; fi
        if [ -f "$root/package.json" ]; then
          if grep -q '"react"[[:space:]]*:' "$root/package.json"; then HAS_REACT=true; fi
          if grep -q '"@angular/core"[[:space:]]*:' "$root/package.json"; then HAS_ANGULAR=true; fi
        fi
        if find "$root" -type f -name '*.py' | grep -q .; then HAS_PY=true; fi
        if find "$root" -type f -name '*.sln' | grep -q .; then HAS_DOTNET=true; fi
        if find "$root" -type f -name 'pubspec.yaml' | grep -q .; then HAS_FLUTTER=true; fi

        {
          echo "HAS_NODE=$HAS_NODE"
          echo "HAS_REACT=$HAS_REACT"
          echo "HAS_ANGULAR=$HAS_ANGULAR"
          echo "HAS_PY=$HAS_PY"
          echo "HAS_DOTNET=$HAS_DOTNET"
          echo "HAS_FLUTTER=$HAS_FLUTTER"
        } >> "$GITHUB_ENV"

    - name: Prepare reports directory
      shell: bash
      run: mkdir -p .github/linter-reports

    # ---------- Runtimes + CACHES ----------

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-3x

    - name: Setup Node.js
      if: ${{ env.HAS_NODE == 'true' || env.HAS_REACT == 'true' || env.HAS_ANGULAR == 'true' }}
      uses: actions/setup-node@v4
      with:
        node-version: "18"
        cache: "npm"
        cache-dependency-path: |
          ${{ env.PROJECT_ROOT }}/package-lock.json
          ${{ env.PROJECT_ROOT }}/yarn.lock
          ${{ env.PROJECT_ROOT }}/pnpm-lock.yaml

    - name: Cache node_modules (fallback)
      if: ${{ env.HAS_NODE == 'true' || env.HAS_REACT == 'true' || env.HAS_ANGULAR == 'true' }}
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.PROJECT_ROOT }}/node_modules
          **/node_modules
        key: node-mods-${{ runner.os }}-${{ hashFiles(format('{0}/{1}', env.PROJECT_ROOT, 'package-lock.json'), format('{0}/{1}', env.PROJECT_ROOT, 'yarn.lock'), format('{0}/{1}', env.PROJECT_ROOT, 'pnpm-lock.yaml')) }}

    - name: Compute Flutter stable ref (cache key)
      if: ${{ env.HAS_FLUTTER == 'true' }}
      id: flutterref
      shell: bash
      run: |
        set -euo pipefail
        rev=$(git ls-remote https://github.com/flutter/flutter.git stable | awk '{print $1}')
        echo "ref=$rev" >> "$GITHUB_OUTPUT"

    - name: Cache Flutter SDK
      if: ${{ env.HAS_FLUTTER == 'true' }}
      uses: actions/cache@v4
      with:
        path: flutter
        key: flutter-${{ steps.flutterref.outputs.ref }}

    - name: Cache pub packages
      if: ${{ env.HAS_FLUTTER == 'true' }}
      uses: actions/cache@v4
      with:
        path: ~/.pub-cache
        key: pub-${{ runner.os }}-${{ steps.flutterref.outputs.ref }}

    - name: Cache .NET tools/NuGet
      if: ${{ env.HAS_DOTNET == 'true' }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.dotnet/tools
          ~/.nuget/packages
        key: dotnet-${{ runner.os }}-${{ hashFiles('**/*.sln', '**/*.csproj', '**/*.props', '**/*.targets') }}

    # ---------- Lint: React (with REACT_GLOBALS like Node) ----------

    - name: Lint React
      shell: bash
      run: |
        set -euo pipefail
        if [ "${HAS_REACT}" = "true" ]; then
          echo "⚛️ Linting React app in $PROJECT_ROOT"
          cd "$PROJECT_ROOT"

          # Add TS support so interfaces/types don't cause parser errors.
          HAS_TS=false
          if find . \( -name "*.ts" -o -name "*.tsx" \) -type f | grep -q .; then HAS_TS=true; fi

          npm install --no-save \
            eslint @eslint/js \
            @babel/core @babel/eslint-parser @babel/preset-react \
            eslint-plugin-react eslint-plugin-react-hooks \
            eslint-plugin-jsx-a11y eslint-plugin-import \
            $([ "$HAS_TS" = "true" ] && echo "typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin") \
            >/dev/null 2>&1 || true

          if [ -f "eslint.config.js" ] || [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f ".eslintrc" ]; then
            # Respect repo config; still suppress warnings
            npx eslint . --ext .js,.jsx,.ts,.tsx \
              --quiet \
              --format json \
              --output-file "$GITHUB_WORKSPACE/.github/linter-reports/eslint.json" || true
          else
            tmpcfg="$PROJECT_ROOT/.tmp.eslint.react.config.mjs"
            cat > "$tmpcfg" <<'EOF'
        const hasTs = !!process.env.HAS_TS && process.env.HAS_TS === "true";
        const babelParser = (await import("@babel/eslint-parser")).default;
        const reactPlugin = (await import("eslint-plugin-react")).default;
        const hooksPlugin = (await import("eslint-plugin-react-hooks")).default;
        const importPlugin = (await import("eslint-plugin-import")).default;

        // Node-style, browser-appropriate globals (mirrors your NODE_GLOBALS vibe)
        const REACT_GLOBALS = {
          console: "readonly", performance: "readonly", queueMicrotask: "readonly",
          setTimeout: "readonly", clearTimeout: "readonly", setInterval: "readonly", clearInterval: "readonly",
          requestAnimationFrame: "readonly", cancelAnimationFrame: "readonly",
          window: "readonly", document: "readonly", navigator: "readonly", location: "readonly", history: "readonly",
          localStorage: "readonly", sessionStorage: "readonly",
          fetch: "readonly", Request: "readonly", Response: "readonly", Headers: "readonly",
          URL: "readonly", URLSearchParams: "readonly",
          TextEncoder: "readonly", TextDecoder: "readonly", AbortController: "readonly",
        };

        let tsParser, tsPlugin;
        if (hasTs) {
          tsParser = (await import("@typescript-eslint/parser")).default;
          tsPlugin = (await import("@typescript-eslint/eslint-plugin")).default;
        }

        export default [
          // Keep noise out
          { ignores: ["node_modules/**", ".next/**", "dist/**", "build/**", "out/**"] },

          // JS/JSX files: use Babel parser
          {
            files: ["**/*.{js,jsx}"],
            languageOptions: {
              parser: babelParser,
              parserOptions: {
                ecmaVersion: "latest",
                sourceType: "module",
                ecmaFeatures: { jsx: true },
                requireConfigFile: false,
                babelOptions: { presets: ["@babel/preset-react"] },
              },
              globals: { ...REACT_GLOBALS },
            },
            plugins: {
              import: importPlugin,
              react: reactPlugin,
              "react-hooks": hooksPlugin,
            },
            rules: {
              // Suppress the “not errors” you listed
              "no-unused-vars": "off",
              "no-undef": "off",

              // Keep only essential React sanity checks
              "react/jsx-no-undef": "off",
              "react-hooks/rules-of-hooks": "off",
              "react-hooks/exhaustive-deps": "off",
            },
            settings: { react: { version: "detect" } },
          },

          // TS/TSX files: use TS parser so interfaces/types parse cleanly
          hasTs && {
            files: ["**/*.{ts,tsx}"],
            languageOptions: {
              parser: tsParser,
              parserOptions: {
                ecmaVersion: "latest",
                sourceType: "module",
                ecmaFeatures: { jsx: true },
                // no project config needed for non-type-aware linting
              },
              globals: { ...REACT_GLOBALS },
            },
            plugins: {
              import: importPlugin,
              react: reactPlugin,
              "react-hooks": hooksPlugin,
              "@typescript-eslint": tsPlugin,
            },
            rules: {
              // Kill noisy “unused/undef” in TS too
              "no-unused-vars": "off",
              "no-undef": "off",
              "@typescript-eslint/no-unused-vars": "off",

              // Keep React checks off unless you want them
              "react/jsx-no-undef": "off",
              "react-hooks/rules-of-hooks": "off",
              "react-hooks/exhaustive-deps": "off",
            },
            settings: { react: { version: "detect" } },
          },
        ].filter(Boolean);
        EOF

                # Tell config whether TS exists
                HAS_TS="$HAS_TS" npx eslint . --ext .js,.jsx,.ts,.tsx \
                  --quiet \
                  --config "$tmpcfg" \
                  --format json \
                  --output-file "$GITHUB_WORKSPACE/.github/linter-reports/eslint.json" || true
              fi
            else
              echo "⚛️ Skipping React linting."
            fi
    # ---------- Lint: Angular ----------
    - name: Lint Angular
      shell: bash
      run: |
        set -euo pipefail
        if [ "${HAS_ANGULAR}" = "true" ]; then
          echo "🛡️ Linting Angular app in $PROJECT_ROOT"
          cd "$PROJECT_ROOT"
          npm install --no-save \
            eslint @eslint/js \
            @angular-eslint/eslint-plugin @angular-eslint/eslint-config \
            eslint-plugin-import >/dev/null 2>&1 || true
          npx eslint 'src/**/*.{ts,tsx}' \
            --format json \
            --output-file "$GITHUB_WORKSPACE/.github/linter-reports/eslint.json" || true
        else
          echo "🛡️ Skipping Angular linting."
        fi

    # ---------- Lint: Generic Node ----------
    - name: Lint Node/JS/TS (generic)
      shell: bash
      run: |
        set -euo pipefail
        if [ "${HAS_NODE}" = "true" ] && [ "${HAS_REACT}" = "false" ] && [ "${HAS_ANGULAR}" = "false" ]; then
          echo "🟩 Generic Node/JS/TS lint in $PROJECT_ROOT"
          cd "$PROJECT_ROOT"

          if find . \( -name "*.ts" -o -name "*.tsx" \) -type f | grep -q .; then HAS_TS=true; else HAS_TS=false; fi

          npm install --no-save eslint @eslint/js eslint-plugin-import >/dev/null 2>&1 || true
          if [ "$HAS_TS" = "true" ]; then
            npm install --no-save typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin >/dev/null 2>&1 || true
          fi

          tmpcfg="$PROJECT_ROOT/.tmp.eslint.node.config.mjs"
          cat > "$tmpcfg" <<'EOF'
        const js = (await import("@eslint/js")).default;
        // Inline Node globals (readonly)
        const NODE_GLOBALS = {
          console: "readonly", process: "readonly", module: "readonly", require: "readonly",
          __dirname: "readonly", __filename: "readonly", exports: "readonly", global: "readonly",
          setTimeout: "readonly", clearTimeout: "readonly", setInterval: "readonly", clearInterval: "readonly",
          setImmediate: "readonly", clearImmediate: "readonly",
          Buffer: "readonly", URL: "readonly", URLSearchParams: "readonly",
          queueMicrotask: "readonly", performance: "readonly", AbortController: "readonly",
          TextEncoder: "readonly", TextDecoder: "readonly",
        };
        let tsParser; try { tsParser = (await import("@typescript-eslint/parser")).default; } catch (_) { tsParser = undefined; }
        export default [
          js.configs.recommended,
          {
            files: ["**/*.{js,jsx,ts,tsx}"],
            languageOptions: {
              ecmaVersion: "latest",
              sourceType: "module",
              ...(tsParser ? { parser: tsParser } : {}),
              globals: { ...NODE_GLOBALS },
            },
            plugins: { import: (await import("eslint-plugin-import")).default },
            rules: { "no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }], "no-undef": "error" }
          }
        ];
        EOF

                  npx eslint . \
                    --config "$tmpcfg" \
                    --format json \
                    --output-file "$GITHUB_WORKSPACE/.github/linter-reports/eslint.json" || true
                else
                  echo "🟩 Skipping generic Node lint (either not Node, or handled by React/Angular step)."
                fi

    # ---------- Lint: Python ----------
    - name: Lint Python
      shell: bash
      run: |
        set -euo pipefail
        if [ "${HAS_PY}" = "true" ]; then
          echo "🐍 Linting Python in $PROJECT_ROOT"
          python -m pip install --upgrade pip >/dev/null 2>&1 || true
          pip install flake8 flake8-json >/dev/null 2>&1 || true
          cd "$PROJECT_ROOT"
          if find . -type f -name "*.py" | grep -q .; then
            flake8 . --format=json --output-file "$GITHUB_WORKSPACE/.github/linter-reports/flake8.json" || true
          fi
        else
          echo "🐍 Skipping Python linting."
        fi

    # ---------- Lint: .NET ----------
    - name: Lint .NET
      shell: bash
      run: |
        set -euo pipefail
        if [ "${HAS_DOTNET}" = "true" ]; then
          echo "🧩 Formatting .NET in $PROJECT_ROOT"
          dotnet tool install -g dotnet-format >/dev/null 2>&1 || true
          export PATH="$PATH:$HOME/.dotnet/tools"
          cd "$PROJECT_ROOT"
          dotnet format --verify-no-changes --report "$GITHUB_WORKSPACE/.github/linter-reports/dotnet-format.json" || true
        else
          echo "🧩 Skipping .NET formatting."
        fi

    # ---------- Analyze: Flutter ----------
    - name: Analyze Flutter
      shell: bash
      run: |
        set -euo pipefail
        if [ "${HAS_FLUTTER}" = "true" ]; then
          echo "🪶 Analyzing Flutter in $PROJECT_ROOT"
          if [ ! -d "flutter" ]; then
            git clone https://github.com/flutter/flutter.git -b stable --depth 1
          fi
          export PATH="$PWD/flutter/bin:$PATH"
          flutter --version
          flutter doctor -v
          cd "$PROJECT_ROOT"
          flutter pub get
          dart analyze --format=json > "$GITHUB_WORKSPACE/.github/linter-reports/dartanalyzer.json" || true
        else
          echo "🪶 Skipping Flutter analysis."
        fi

    # ---------- AI Review ----------
    - name: Install Python deps for AI bot
      shell: bash
      run: |
        set -euo pipefail
        python -m pip install --upgrade pip >/dev/null 2>&1 || true
        pip install openai PyGithub pytz >/dev/null 2>&1 || true

    - name: Run the AI review
      shell: bash
      env:
        OPENAI_API_KEY: ${{ inputs.openai_key }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_EVENT_PATH: ${{ github.event_path }}
        TARGET_TIMEZONE: Asia/Kolkata
      run: |
        set -euo pipefail
        python "$GITHUB_ACTION_PATH/.github/scripts/bobot_review.py"