name: "brandOptics AI Neural Nexus Code Review"
description: "Runs the brandOptics AI neural-intelligence engine against your PR."
branding:
  icon: "zap"
  color: "green"

inputs:
  openai_key:
    description: "Your OpenAI API key"
    required: true
  github_token:
    description: "GitHub Actions token (pass via workflow)"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - id: detect
      name: Find project root and detect languages
      shell: bash
      run: |
        set -euo pipefail

        # Find first package.json outside node_modules for PROJECT_ROOT
        pkg=$(find . -type f -name package.json -not -path "*/node_modules/*" | head -n1 || true)
        if [ -n "${pkg:-}" ]; then
          root=$(dirname "$pkg")
        else
          root="."
        fi
        echo "PROJECT_ROOT=$root" >> "$GITHUB_ENV"

        # Initialize flags
        HAS_NODE=false
        HAS_REACT=false
        HAS_ANGULAR=false
        HAS_PY=false
        HAS_DOTNET=false
        HAS_FLUTTER=false

        if find . -type f \( -name "package.json" -o -name "package-lock.json" -o -name "yarn.lock" -o -name "pnpm-lock.yaml" \) \
             -not -path "*/node_modules/*" | grep -q .; then
          HAS_NODE=true
        fi

        if [ -f "$root/package.json" ]; then
          if grep -q '"react"[[:space:]]*:' "$root/package.json"; then
            HAS_REACT=true
          fi
          if grep -q '"@angular/core"[[:space:]]*:' "$root/package.json"; then
            HAS_ANGULAR=true
          fi
        fi

        if find "$root" -type f -name '*.py' | grep -q .; then
          HAS_PY=true
        fi

        if find "$root" -type f -name '*.sln' | grep -q .; then
          HAS_DOTNET=true
        fi

        if find "$root" -type f -name 'pubspec.yaml' | grep -q .; then
          HAS_FLUTTER=true
        fi

        {
          echo "HAS_NODE=$HAS_NODE"
          echo "HAS_REACT=$HAS_REACT"
          echo "HAS_ANGULAR=$HAS_ANGULAR"
          echo "HAS_PY=$HAS_PY"
          echo "HAS_DOTNET=$HAS_DOTNET"
          echo "HAS_FLUTTER=$HAS_FLUTTER"
        } >> "$GITHUB_ENV"

    - name: Prepare reports directory
      shell: bash
      run: mkdir -p .github/linter-reports
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Setup Node.js
      if: ${{ env.HAS_NODE == 'true' || env.HAS_REACT == 'true' || env.HAS_ANGULAR == 'true' }}
      uses: actions/setup-node@v4
      with:
        node-version: "18"

    - name: Lint React
      shell: bash
      run: |
        set -euo pipefail
        if [ "${HAS_REACT}" = "true" ]; then
          echo "⚛️ Linting React app in $PROJECT_ROOT"
          cd "$PROJECT_ROOT"
          npm install --no-save \
            eslint @eslint/js \
            @babel/core @babel/eslint-parser @babel/preset-react \
            eslint-plugin-react eslint-plugin-react-hooks \
            eslint-plugin-react-refresh eslint-plugin-jsx-a11y \
            eslint-plugin-import eslint-plugin-sonarjs

          if [ -f "eslint.config.js" ] || [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f ".eslintrc" ]; then
            npx eslint . \
              --max-warnings=1000 \
              --format json \
              --output-file "$GITHUB_WORKSPACE/.github/linter-reports/eslint.json" || \
              echo "⚛️ ESLint completed with non-zero exit (treated as warnings)."
          else
            tmpcfg="$PROJECT_ROOT/.tmp.eslint.react.config.mjs"
            cat > "$tmpcfg" <<'EOF'
        export default [
          {
            files: ["**/*.{js,jsx,ts,tsx}"],
            languageOptions: {
              parserOptions: {
                ecmaVersion: "latest",
                sourceType: "module",
                ecmaFeatures: { jsx: true }
              }
            },
            plugins: {
              import: (await import("eslint-plugin-import")).default,
              react: (await import("eslint-plugin-react")).default
            },
            rules: {
              "no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],
              "react/jsx-no-undef": "error"
            }
          }
        ];
        EOF
            npx eslint . \
              --config "$tmpcfg" \
              --format json \
              --output-file "$GITHUB_WORKSPACE/.github/linter-reports/eslint.json" || true
          fi
        else
          echo "Skipping React linting."
        fi

    - name: Lint Angular
      shell: bash
      run: |
        set -euo pipefail
        if [ "${HAS_ANGULAR}" = "true" ]; then
          echo "🛡️ Linting Angular app in $PROJECT_ROOT"
          cd "$PROJECT_ROOT"
          npm install --no-save \
            eslint @eslint/js \
            @angular-eslint/eslint-plugin @angular-eslint/eslint-config \
            eslint-plugin-import
          npx eslint 'src/**/*.{ts,tsx}' \
            --format json \
            --output-file "$GITHUB_WORKSPACE/.github/linter-reports/eslint.json" || true
        else
          echo "🛡️ Skipping Angular linting."
        fi

    - name: Lint Node/JS/TS (generic)
      shell: bash
      run: |
        set -euo pipefail
        if [ "${HAS_NODE}" = "true" ] && [ "${HAS_REACT}" = "false" ] && [ "${HAS_ANGULAR}" = "false" ]; then
          echo "🟩 Generic Node/JS/TS lint in $PROJECT_ROOT"
          cd "$PROJECT_ROOT"

          if find . \( -name "*.ts" -o -name "*.tsx" \) -type f | grep -q .; then
            HAS_TS=true
          else
            HAS_TS=false
          fi

          npm install --no-save eslint @eslint/js eslint-plugin-import >/dev/null 2>&1
          if [ "$HAS_TS" = "true" ]; then
            npm install --no-save typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin >/dev/null 2>&1
          fi

          tmpcfg="$PROJECT_ROOT/.tmp.eslint.node.config.mjs"
          cat > "$tmpcfg" <<'EOF'
        const js = (await import("@eslint/js")).default;
        let tsParser;
        try {
          tsParser = (await import("@typescript-eslint/parser")).default;
        } catch (_) {
          tsParser = undefined;
        }

        export default [
          js.configs.recommended,
          {
            files: ["**/*.{js,jsx,ts,tsx}"],
            languageOptions: {
              ecmaVersion: "latest",
              sourceType: "module",
              ...(tsParser ? { parser: tsParser } : {}),
                globals: {
                ...globals.node, 
                  console: "readonly",
                  process: "readonly", 
            },
            },
            plugins: {
              import: (await import("eslint-plugin-import")).default
            },
            rules: {
              "no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],
              "no-undef": "error"
            }
          }
        ];
        EOF

          npx eslint . \
            --config "$tmpcfg" \
            --format json \
            --output-file "$GITHUB_WORKSPACE/.github/linter-reports/eslint.json" || true
        else
          echo "🟩 Skipping generic Node lint (either not Node, or handled by React/Angular step)."
        fi


    - name: Lint Python
      shell: bash
      run: |
        set -euo pipefail
        if [ "${HAS_PY}" = "true" ]; then
          echo "🐍 Linting Python in $PROJECT_ROOT"
          python -m pip install --upgrade pip
          pip install flake8 flake8-json
          cd "$PROJECT_ROOT"
          if find . -type f -name "*.py" | grep -q .; then
            flake8 . --format=json --output-file "$GITHUB_WORKSPACE/.github/linter-reports/flake8.json" || true
          fi
        else
          echo "🐍 Skipping Python linting."
        fi

    - name: Lint .NET
      shell: bash
      run: |
        set -euo pipefail
        if [ "${HAS_DOTNET}" = "true" ]; then
          echo "🧩 Formatting .NET in $PROJECT_ROOT"
          dotnet tool install -g dotnet-format
          export PATH="$PATH:$HOME/.dotnet/tools"
          cd "$PROJECT_ROOT"
          dotnet format --verify-no-changes --report "$GITHUB_WORKSPACE/.github/linter-reports/dotnet-format.json" || true
        else
          echo "🧩 Skipping .NET formatting."
        fi

    - name: Analyze Flutter
      shell: bash
      run: |
        set -euo pipefail
        if [ "${HAS_FLUTTER}" = "true" ]; then
          echo "🪶 Analyzing Flutter in $PROJECT_ROOT"
          git clone https://github.com/flutter/flutter.git -b stable --depth 1
          export PATH="$PWD/flutter/bin:$PATH"
          flutter doctor
          cd "$PROJECT_ROOT"
          flutter pub get
          dart analyze --format=json > "$GITHUB_WORKSPACE/.github/linter-reports/dartanalyzer.json" || true
        else
          echo "🪶 Skipping Flutter analysis."
        fi

    - name: Install Python deps for AI bot
      shell: bash
      run: |
        set -euo pipefail
        python -m pip install --upgrade pip
        pip install openai PyGithub pytz

    - name: Run the AI review
      shell: bash
      env:
        OPENAI_API_KEY: ${{ inputs.openai_key }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_EVENT_PATH: ${{ github.event_path }}
        TARGET_TIMEZONE: Asia/Kolkata
      run: |
        set -euo pipefail
        python "$GITHUB_ACTION_PATH/.github/scripts/bobot_review.py"