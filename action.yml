name: "brandOptics AI Code Review"
description: "Runs the brandOptics AI neural-intelligence engine against your PR."
inputs:
  openai_key:
    description: "Your OpenAI API key"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install openai PyGithub flake8 flake8-json

    - name: Set up Node & ESLint
      uses: actions/setup-node@v4
      with:
        node-version: "18"
    - run: npm install -g eslint

    - name: Install ShellCheck
      run: sudo apt-get update && sudo apt-get install -y shellcheck

    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: "7.0.x"

    - name: Install Flutter SDK
      uses: subosito/flutter-action@v2
      with:
        channel: stable

    - name: Prepare linter-reports folder
      run: mkdir -p .github/linter-reports

    - name: Run ESLint (JS/TS/React/Angular)
      run: |
        FILES=$(find . -type f \( -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" \))
        if [ -n "$FILES" ]; then
          eslint '**/*.js' '**/*.jsx' '**/*.ts' '**/*.tsx' \
            --format json \
            --output-file .github/linter-reports/eslint.json || true
        fi

    - name: Run Flake8 (Python)
      run: |
        FILES=$(find . -type f -name "*.py")
        if [ -n "$FILES" ]; then
          flake8 . --format=json --output-file .github/linter-reports/flake8.json || true
        fi

    - name: Run ShellCheck (Shell scripts)
      run: |
        FILES=$(find . -type f -name "*.sh")
        if [ -n "$FILES" ]; then
          find . -type f -name "*.sh" \
            | xargs -I {} sh -c "shellcheck -f json {} 2>/dev/null >> .github/linter-reports/shellcheck.json" || true
        fi

    - name: Fetch dependencies (Flutter/Dart)
      run: |
        if [ -f "pubspec.yaml" ]; then
          flutter pub get
        fi

    - name: Run Dart/Flutter Analyzer
      run: |
        if [ -f "pubspec.yaml" ] && [ -d "lib" ]; then
          dart analyze --format=json > .github/linter-reports/dartanalyzer.json || true
        else
          echo '{"diagnostics":[]}' > .github/linter-reports/dartanalyzer.json
        fi

    - name: Run the AI review
      env:
        OPENAI_API_KEY: ${{ inputs.openai_key }}
        GITHUB_TOKEN:      ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_EVENT_PATH: ${{ github.event_path }}
      run: python .github/scripts/bobot_review.py