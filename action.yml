name: "brandOptics AI Neural Nexus Code Review"
description: "Runs the brandOptics AI neural-intelligence engine against your PR."
branding:
  icon: "zap"
  color: "green"

inputs:
  openai_key:
    description: "Your OpenAI API key"
    required: true
  github_token:
    description: "GitHub Actions token (pass via workflow)"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - id: detect
      name: Find project root and detect languages
      shell: bash
      run: |
        set -euo pipefail

        # Find first package.json outside node_modules for PROJECT_ROOT
        pkg=$(find . -type f -name package.json -not -path "*/node_modules/*" | head -n1 || true)
        if [ -n "${pkg:-}" ]; then
          root=$(dirname "$pkg")
        else
          root="."
        fi
        echo "PROJECT_ROOT=$root" >> "$GITHUB_ENV"

        # Initialize flags
        HAS_NODE=false
        HAS_REACT=false
        HAS_ANGULAR=false
        HAS_PY=false
        HAS_DOTNET=false
        HAS_FLUTTER=false

        if find . -type f \( -name "package.json" -o -name "package-lock.json" -o -name "yarn.lock" -o -name "pnpm-lock.yaml" \) \
             -not -path "*/node_modules/*" | grep -q .; then
          HAS_NODE=true
        fi

        if [ -f "$root/package.json" ]; then
          if grep -q '"react"[[:space:]]*:' "$root/package.json"; then
            HAS_REACT=true
          fi
          if grep -q '"@angular/core"[[:space:]]*:' "$root/package.json"; then
            HAS_ANGULAR=true
          fi
        fi

        if find "$root" -type f -name '*.py' | grep -q .; then
          HAS_PY=true
        fi

        if find "$root" -type f -name '*.sln' | grep -q .; then
          HAS_DOTNET=true
        fi

        if find "$root" -type f -name 'pubspec.yaml' | grep -q .; then
          HAS_FLUTTER=true
        fi

        {
          echo "HAS_NODE=$HAS_NODE"
          echo "HAS_REACT=$HAS_REACT"
          echo "HAS_ANGULAR=$HAS_ANGULAR"
          echo "HAS_PY=$HAS_PY"
          echo "HAS_DOTNET=$HAS_DOTNET"
          echo "HAS_FLUTTER=$HAS_FLUTTER"
        } >> "$GITHUB_ENV"

    - name: Prepare reports & caches dir
      shell: bash
      run: |
        mkdir -p .github/linter-reports
        mkdir -p .cache/eslint

    # ---------- Node / React / Angular caching ----------
    - name: Setup Node.js (with npm cache)
      if: ${{ env.HAS_NODE == 'true' || env.HAS_REACT == 'true' || env.HAS_ANGULAR == 'true' }}
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        cache: "npm"
        cache-dependency-path: ${{ env.PROJECT_ROOT }}/package-lock.json

    - name: Cache ESLint cache file
      if: ${{ env.HAS_NODE == 'true' || env.HAS_REACT == 'true' || env.HAS_ANGULAR == 'true' }}
      uses: actions/cache@v4
      with:
        path: .cache/eslint
        key: eslint-${{ runner.os }}-${{ hashFiles(format('{0}/package-lock.json', env.PROJECT_ROOT)) }}-${{ hashFiles('**/.eslintrc.*', '**/eslint.config.*') }}
        restore-keys: |
          eslint-${{ runner.os }}-${{ hashFiles(format('{0}/package-lock.json', env.PROJECT_ROOT)) }}-
          eslint-${{ runner.os }}-

    - name: Lint React / Next.js (uses project deps, cached)
      if: ${{ env.HAS_REACT == 'true' }}
      shell: bash
      run: |
        set -euo pipefail
        echo "⚛️ Linting React/Next in $PROJECT_ROOT"
        cd "$PROJECT_ROOT"

        # Use project deps (fast w/ npm cache). If lockfile exists, CI install.
        if [ -f package-lock.json ]; then
          npm ci --no-audit --no-fund
        else
          npm install --no-audit --no-fund
        fi

        # Respect repo config; fall back to safe defaults
        TARGETS=(
          "app/**/*.{js,jsx,ts,tsx}"
          "pages/**/*.{js,jsx,ts,tsx}"
          "components/**/*.{js,jsx,ts,tsx}"
          "src/**/*.{js,jsx,ts,tsx}"
        )
        mkdir -p "$GITHUB_WORKSPACE/.github/linter-reports"

        # Use ESLint cache for speed
        npx eslint "${TARGETS[@]}" \
          --cache \
          --cache-location "$GITHUB_WORKSPACE/.cache/eslint/.eslintcache" \
          --format json \
          --output-file "$GITHUB_WORKSPACE/.github/linter-reports/eslint.json" \
          || true
        echo "✅ ESLint finished."

    - name: Lint Angular (uses project deps, cached)
      if: ${{ env.HAS_ANGULAR == 'true' }}
      shell: bash
      run: |
        set -euo pipefail
        echo "🛡️ Linting Angular in $PROJECT_ROOT"
        cd "$PROJECT_ROOT"

        if [ -f package-lock.json ]; then
          npm ci --no-audit --no-fund
        else
          npm install --no-audit --no-fund
        fi

        mkdir -p "$GITHUB_WORKSPACE/.github/linter-reports"
        npx eslint 'src/**/*.{ts,tsx}' \
          --cache \
          --cache-location "$GITHUB_WORKSPACE/.cache/eslint/.eslintcache" \
          --format json \
          --output-file "$GITHUB_WORKSPACE/.github/linter-reports/eslint.json" || true

    - name: Lint Node/JS/TS (generic; uses project deps, cached)
      if: ${{ env.HAS_NODE == 'true' && env.HAS_REACT != 'true' && env.HAS_ANGULAR != 'true' }}
      shell: bash
      run: |
        set -euo pipefail
        echo "🟩 Generic Node/JS/TS lint in $PROJECT_ROOT"
        cd "$PROJECT_ROOT"

        if [ -f package-lock.json ]; then
          npm ci --no-audit --no-fund
        else
          npm install --no-audit --no-fund
        fi

        mkdir -p "$GITHUB_WORKSPACE/.github/linter-reports"
        npx eslint . \
          --cache \
          --cache-location "$GITHUB_WORKSPACE/.cache/eslint/.eslintcache" \
          --format json \
          --output-file "$GITHUB_WORKSPACE/.github/linter-reports/eslint.json" || true

    # ---------- Python caching ----------
    - name: Setup Python (with pip cache)
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
        cache: "pip"
        cache-dependency-path: |
          ${{ env.PROJECT_ROOT }}/requirements.txt
          ${{ env.PROJECT_ROOT }}/requirements-dev.txt

    - name: Lint Python (flake8)
      if: ${{ env.HAS_PY == 'true' }}
      shell: bash
      run: |
        set -euo pipefail
        echo "🐍 Linting Python in $PROJECT_ROOT"
        python -m pip install --upgrade pip
        pip install flake8 flake8-json
        cd "$PROJECT_ROOT"
        if find . -type f -name "*.py" | grep -q .; then
          flake8 . --format=json --output-file "$GITHUB_WORKSPACE/.github/linter-reports/flake8.json" || true
        fi

    # ---------- .NET caching ----------
    - name: Setup .NET (with NuGet cache)
      if: ${{ env.HAS_DOTNET == 'true' }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: "8.0.x"
        cache: true

    - name: Lint .NET (dotnet-format)
      if: ${{ env.HAS_DOTNET == 'true' }}
      shell: bash
      run: |
        set -euo pipefail
        echo "🧩 Formatting .NET in $PROJECT_ROOT"
        export PATH="$PATH:$HOME/.dotnet/tools"
        # Cache global tool binaries + NuGet packages (best-effort)
        echo "::group::Install dotnet-format"
        dotnet tool install -g dotnet-format || dotnet tool update -g dotnet-format
        echo "::endgroup::"

        cd "$PROJECT_ROOT"
        dotnet restore || true
        dotnet format --verify-no-changes --report "$GITHUB_WORKSPACE/.github/linter-reports/dotnet-format.json" || true

    # ---------- Flutter caching ----------
    - name: Setup Flutter (cached SDK)
      if: ${{ env.HAS_FLUTTER == 'true' }}
      uses: subosito/flutter-action@v2
      with:
        channel: "stable"
        cache: true

    - name: Cache pub packages
      if: ${{ env.HAS_FLUTTER == 'true' }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          ${{ env.PROJECT_ROOT }}/.dart_tool
        key: pub-${{ runner.os }}-${{ hashFiles(format('{0}/pubspec.lock', env.PROJECT_ROOT)) }}
        restore-keys: |
          pub-${{ runner.os }}-

    - name: Analyze Flutter
      if: ${{ env.HAS_FLUTTER == 'true' }}
      shell: bash
      run: |
        set -euo pipefail
        echo "🪶 Analyzing Flutter in $PROJECT_ROOT"
        flutter --version
        cd "$PROJECT_ROOT"
        flutter pub get
        dart analyze --format=json > "$GITHUB_WORKSPACE/.github/linter-reports/dartanalyzer.json" || true

    # ---------- AI review ----------
    - name: Install Python deps for AI bot (cached by pip)
      shell: bash
      run: |
        set -euo pipefail
        python -m pip install --upgrade pip
        pip install openai PyGithub pytz

    - name: Run the AI review
      shell: bash
      env:
        OPENAI_API_KEY: ${{ inputs.openai_key }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_EVENT_PATH: ${{ github.event_path }}
        TARGET_TIMEZONE: Asia/Kolkata
      run: |
        set -euo pipefail
        python "$GITHUB_ACTION_PATH/.github/scripts/bobot_review.py"